{
  "keywords" : "abstract object Double Float Long Int Short Byte Char Unit Boolean case catch class def do else extends false final finally for forSome if implicit import lazy match new null object override package private protected return sealed super this throw trait true try type val var while with yeild"
      ,
  "packages" : [
    {
      "material" : {
        "keywords" :[]
      },
      "package" : {
        "keywords" :[]
      }
    }
  ],
  "snipplets" : ["val function = (x: Int) => x + 1","def function(x: Int, y: Int): Int = x + y",
    "class Class(var x: Int, var y: Int){\n  def show(): Unit = {\n    println(x)\n    println(y)\n  }\n}\n",
    "for (n <- nums)\n  println(n)"]
}